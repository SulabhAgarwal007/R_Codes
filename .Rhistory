round(prop.table(table(df$marital.status, df$Y),1),1)
df = df %>% mutate(ms_1=as.numeric(df$marital.status %in% c('Divorced','Married-spouse-absent','Separated','Widowed')),
ms_2=as.numeric(df$marital.status %in% c('Never-married'))
) %>% select(-marital.status)
# occupation
round(prop.table(table(df$country, df$Y),1),1)
# occupation
round(prop.table(table(df$occupation, df$Y),1),1)
df = df %>% mutate(occ_1 = as.numeric(df$occupation =='Prof-specialty'),
occ_2 = as.numeric(df$occupation %in% c('Protective-serv','Sales','Tech-support')),
occ_3 = as.numeric(df$occupation %in% c('Craft-repair','Transport-moving')),
occ_4 = as.numeric(df$occupation %in% c('?','Adm-clerical','Armed-Forces','Farming-fishing','Handlers-cleaners','Machine-op-inspct')),
occ_5 = as.numeric(df$occupation %in% c('Other-service','Priv-house-serv'))
) %>% select(-occupation)
# native.country
round(prop.table(table(df$native.country, df$Y),1),1)
df = df %>% mutate(nc_1 = as.numeric(df$native.country %in% c('?','Canada','China','Cuba','England','Germany','Greece','Hong','Italy','Philippines')),
nc_2 = as.numeric(df$native.country %in% c('Hungary','Ireland','Poland','Scotland','South','Thailand','United-States')),
nc_3 = as.numeric(df$native.country %in% c('Ecuador','El-Salvador','Haiti','Honduras','Jamaica','Laos','Mexico','Nicaragua','Peru','Portugal','Puerto-Rico','Trinadad&Tobago','Vietnam')),
nc_4 = as.numeric(df$native.country %in% c('Columbia','Dominican-Republic','Guatemala','Holand-Netherlands','Outlying-US(Guam-USVI-etc)'))
) %>% select(-native.country)
library(dplyr)
glimpse(df)
summary(df)
sum(df$capital.gain==0)/nrow(df)
sum(df$capital.loss==0)/nrow(df)
sum(df$hours.per.week==40)/nrow(df)
df = df %>% mutate(cg_flag = as.numeric(capital.gain==0),
cl_flag = as.numeric(capital.loss==0))
table(df$Y)
df = df %>% mutate(cg_flag = as.numeric(capital.gain==0),
cl_flag = as.numeric(capital.loss==0),
Y = as.numeric(Y == '>50K'))
write.csv(df, "census_income_modified.csv")
getwd()
df = data.frame(read.csv('census_income_modified.csv'))
split = 0.75
set.seed(123)
r = sample(1:nrow(df), 0.75*nrow(df))
df_train = df[r,]
df_test = df[-r,]
lm_model = lm(Y~., df_train)
library(car)
vif(lm_model)
lm_model = lm(Y~.-capital.gain-capital.loss, df_train)
vif(lm_model)
summary(df_train)
df = select(df, -c(capital.gain, capital.loss))
split = 0.75
set.seed(123)
r = sample(1:nrow(df), split*nrow(df))
df_train = df[r,]
df_test = df[-r,]
lm_model = lm(Y~.-capital.gain-capital.loss, df_train)
lm_model = lm(Y~., df_train)
vif(lm_model)
summary(df_train)
df = data.frame(read.csv("datasets/Data/Data/census_income.csv", stringsAsFactors = F))
View(df)
col_name = names(df)[-length(names(df))]
dummy_var_list = c()
for (c in col_name) {
if (typeof(df[,c]) == "character" ){
print(paste0("Number of Categories in ",c," : ", length(unique(df[,c]))))
if(length(unique(df[,c]))<=6){
dummy_var_list = append(dummy_var_list, c) # list of cat var with 6 or less categories
}
}
}
##---------------------Create Dummies
CreateDummies=function(data,var,freq_cutoff=0){
t=table(data[,var])
t=t[t>freq_cutoff]
t=sort(t)
categories=names(t)[-1]
for( cat in categories){
name=paste(var,cat,sep="_")
name=gsub(" ","",name)
name=gsub("-","_",name)
name=gsub("\\?","Q",name)
name=gsub("<","LT_",name)
name=gsub("\\+","",name)
name=gsub("\\/","_",name)
name=gsub(">","GT_",name)
name=gsub("=","EQ_",name)
name=gsub(",","",name)
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
for (var in dummy_var_list){
df = CreateDummies(df, var)
}
##--------------Grouping of categories
# workclass
# round(prop.table(table(df$workclass, df$Y),1),1)
df = df %>% mutate(wc_1 = as.numeric(df$workclass =='Self-emp-inc'),
wc_2 = as.numeric(df$workclass =='Federal-gov'),
wc_3 = as.numeric(df$workclass %in% c('Local-gov','Self-emp-not-inc','State-gov')),
wc_4 = as.numeric(df$workclass =='Private'),
wc_5 = as.numeric(df$workclass =='?')
) %>% select(-workclass)
# education
# round(prop.table(table(df$education, df$Y),1),1)
df = df %>% mutate(edu_1 = as.numeric(df$education =='Masters'),
edu_2 = as.numeric(df$education =='Bachelors'),
edu_3 = as.numeric(df$education == 'Assoc-voc'),
edu_4 = as.numeric(df$education %in% c('Assoc-acdm','HS-grad','Some-college')),
edu_5 = as.numeric(df$education %in% c('10th','11th','12th','7th-8th','9th')),
edu_6 = as.numeric(df$education %in% c('1st-4th','5th-6th','Preschool'))
) %>% select(-education)
# marital.status
# round(prop.table(table(df$marital.status, df$Y),1),1)
df = df %>% mutate(ms_1=as.numeric(df$marital.status %in% c('Divorced','Married-spouse-absent','Separated','Widowed')),
ms_2=as.numeric(df$marital.status %in% c('Never-married'))
) %>% select(-marital.status)
# occupation
round(prop.table(table(df$occupation, df$Y),1),1)
df = df %>% mutate(occ_1 = as.numeric(df$occupation =='Prof-specialty'),
occ_2 = as.numeric(df$occupation %in% c('Protective-serv','Sales','Tech-support')),
occ_3 = as.numeric(df$occupation %in% c('Craft-repair','Transport-moving')),
occ_4 = as.numeric(df$occupation %in% c('?','Adm-clerical','Armed-Forces','Farming-fishing','Handlers-cleaners','Machine-op-inspct')),
occ_5 = as.numeric(df$occupation %in% c('Other-service','Priv-house-serv'))
) %>% select(-occupation)
# native.country
round(prop.table(table(df$native.country, df$Y),1),1)
df = df %>% mutate(nc_1 = as.numeric(df$native.country %in% c('?','Canada','China','Cuba','England','Germany','Greece','Hong','Italy','Philippines')),
nc_2 = as.numeric(df$native.country %in% c('Hungary','Ireland','Poland','Scotland','South','Thailand','United-States')),
nc_3 = as.numeric(df$native.country %in% c('Ecuador','El-Salvador','Haiti','Honduras','Jamaica','Laos','Mexico','Nicaragua','Peru','Portugal','Puerto-Rico','Trinadad&Tobago','Vietnam')),
nc_4 = as.numeric(df$native.country %in% c('Columbia','Dominican-Republic','Guatemala','Holand-Netherlands','Outlying-US(Guam-USVI-etc)'))
) %>% select(-native.country)
##-----------------Flag Variables
# to convert those variable into flags which have high number of same values
sum(df$capital.gain==0)/nrow(df)
sum(df$capital.loss==0)/nrow(df)
sum(df$hours.per.week==40)/nrow(df)
df = df %>% mutate(cg_flag = as.numeric(capital.gain==0),
cl_flag = as.numeric(capital.loss==0),
Y = as.numeric(Y == '>50K'))
df = data.frame(read.csv("datasets/Data/Data/census_income.csv", stringsAsFactors = F))
View(df)
col_name = names(df)[-length(names(df))]
dummy_var_list = c()
for (c in col_name) {
if (typeof(df[,c]) == "character" ){
print(paste0("Number of Categories in ",c," : ", length(unique(df[,c]))))
if(length(unique(df[,c]))<=6){
dummy_var_list = append(dummy_var_list, c) # list of cat var with 6 or less categories
}
}
}
##---------------------Create Dummies
CreateDummies=function(data,var,freq_cutoff=0){
t=table(data[,var])
t=t[t>freq_cutoff]
t=sort(t)
categories=names(t)[-1]
for( cat in categories){
name=paste(var,cat,sep="_")
name=gsub(" ","",name)
name=gsub("-","_",name)
name=gsub("\\?","Q",name)
name=gsub("<","LT_",name)
name=gsub("\\+","",name)
name=gsub("\\/","_",name)
name=gsub(">","GT_",name)
name=gsub("=","EQ_",name)
name=gsub(",","",name)
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
for (var in dummy_var_list){
df = CreateDummies(df, var)
}
##--------------Grouping of categories
# workclass
# round(prop.table(table(df$workclass, df$Y),1),1)
df = df %>% mutate(wc_1 = as.numeric(df$workclass =='Self-emp-inc'),
wc_2 = as.numeric(df$workclass =='Federal-gov'),
wc_3 = as.numeric(df$workclass %in% c('Local-gov','Self-emp-not-inc','State-gov')),
wc_4 = as.numeric(df$workclass =='Private'),
wc_5 = as.numeric(df$workclass =='?')
) %>% select(-workclass)
# education
# round(prop.table(table(df$education, df$Y),1),1)
df = df %>% mutate(edu_1 = as.numeric(df$education =='Masters'),
edu_2 = as.numeric(df$education =='Bachelors'),
edu_3 = as.numeric(df$education == 'Assoc-voc'),
edu_4 = as.numeric(df$education %in% c('Assoc-acdm','HS-grad','Some-college')),
edu_5 = as.numeric(df$education %in% c('10th','11th','12th','7th-8th','9th')),
edu_6 = as.numeric(df$education %in% c('1st-4th','5th-6th','Preschool'))
) %>% select(-education)
# marital.status
# round(prop.table(table(df$marital.status, df$Y),1),1)
df = df %>% mutate(ms_1=as.numeric(df$marital.status %in% c('Divorced','Married-spouse-absent','Separated','Widowed')),
ms_2=as.numeric(df$marital.status %in% c('Never-married'))
) %>% select(-marital.status)
# occupation
round(prop.table(table(df$occupation, df$Y),1),1)
df = df %>% mutate(occ_1 = as.numeric(df$occupation =='Prof-specialty'),
occ_2 = as.numeric(df$occupation %in% c('Protective-serv','Sales','Tech-support')),
occ_3 = as.numeric(df$occupation %in% c('Craft-repair','Transport-moving')),
occ_4 = as.numeric(df$occupation %in% c('?','Adm-clerical','Armed-Forces','Farming-fishing','Handlers-cleaners','Machine-op-inspct')),
occ_5 = as.numeric(df$occupation %in% c('Other-service','Priv-house-serv'))
) %>% select(-occupation)
# native.country
round(prop.table(table(df$native.country, df$Y),1),1)
df = df %>% mutate(nc_1 = as.numeric(df$native.country %in% c('?','Canada','China','Cuba','England','Germany','Greece','Hong','Italy','Philippines')),
nc_2 = as.numeric(df$native.country %in% c('Hungary','Ireland','Poland','Scotland','South','Thailand','United-States')),
nc_3 = as.numeric(df$native.country %in% c('Ecuador','El-Salvador','Haiti','Honduras','Jamaica','Laos','Mexico','Nicaragua','Peru','Portugal','Puerto-Rico','Trinadad&Tobago','Vietnam')),
nc_4 = as.numeric(df$native.country %in% c('Columbia','Dominican-Republic','Guatemala','Holand-Netherlands','Outlying-US(Guam-USVI-etc)'))
) %>% select(-native.country)
##-----------------Flag Variables
# to convert those variable into flags which have high number of same values
sum(df$capital.gain==0)/nrow(df)
sum(df$capital.loss==0)/nrow(df)
sum(df$hours.per.week==40)/nrow(df)
df = df %>% mutate(cg_flag = as.numeric(capital.gain==0),
cl_flag = as.numeric(capital.loss==0),
Y = as.numeric(Y == ' >50K'))
write.csv(df, "census_income_modified.csv")
library(car)
##--------------read data
df = data.frame(read.csv('census_income_modified.csv'))
df = select(df, -c(capital.gain, capital.loss))
##--------------split data into train and test
split = 0.75
set.seed(123)
r = sample(1:nrow(df), split*nrow(df))
df_train = df[r,]
df_test = df[-r,]
##------------Remove multicolinearity
lm_model = lm(Y~., df_train)
vif(lm_model)
summary(df_train)
df = data.frame(read.csv("datasets/Data/Data/census_income.csv", stringsAsFactors = F))
View(df)
col_name = names(df)[-length(names(df))]
dummy_var_list = c()
for (c in col_name) {
if (typeof(df[,c]) == "character" ){
print(paste0("Number of Categories in ",c," : ", length(unique(df[,c]))))
if(length(unique(df[,c]))<=6){
dummy_var_list = append(dummy_var_list, c) # list of cat var with 6 or less categories
}
}
}
##---------------------Create Dummies
CreateDummies=function(data,var,freq_cutoff=0){
t=table(data[,var])
t=t[t>freq_cutoff]
t=sort(t)
categories=names(t)[-1]
for( cat in categories){
name=paste(var,cat,sep="_")
name=gsub(" ","",name)
name=gsub("-","_",name)
name=gsub("\\?","Q",name)
name=gsub("<","LT_",name)
name=gsub("\\+","",name)
name=gsub("\\/","_",name)
name=gsub(">","GT_",name)
name=gsub("=","EQ_",name)
name=gsub(",","",name)
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
for (var in dummy_var_list){
df = CreateDummies(df, var)
}
df = gsub(" ","",df)
##--------------Grouping of categories
# workclass
# round(prop.table(table(df$workclass, df$Y),1),1)
df = df %>% mutate(wc_1 = as.numeric(df$workclass =='Self-emp-inc'),
wc_2 = as.numeric(df$workclass =='Federal-gov'),
wc_3 = as.numeric(df$workclass %in% c('Local-gov','Self-emp-not-inc','State-gov')),
wc_4 = as.numeric(df$workclass =='Private'),
wc_5 = as.numeric(df$workclass =='?')
) %>% select(-workclass)
# education
# round(prop.table(table(df$education, df$Y),1),1)
df = df %>% mutate(edu_1 = as.numeric(df$education =='Masters'),
edu_2 = as.numeric(df$education =='Bachelors'),
edu_3 = as.numeric(df$education == 'Assoc-voc'),
edu_4 = as.numeric(df$education %in% c('Assoc-acdm','HS-grad','Some-college')),
edu_5 = as.numeric(df$education %in% c('10th','11th','12th','7th-8th','9th')),
edu_6 = as.numeric(df$education %in% c('1st-4th','5th-6th','Preschool'))
) %>% select(-education)
# marital.status
# round(prop.table(table(df$marital.status, df$Y),1),1)
df = df %>% mutate(ms_1=as.numeric(df$marital.status %in% c('Divorced','Married-spouse-absent','Separated','Widowed')),
ms_2=as.numeric(df$marital.status %in% c('Never-married'))
) %>% select(-marital.status)
# occupation
round(prop.table(table(df$occupation, df$Y),1),1)
df = df %>% mutate(occ_1 = as.numeric(df$occupation =='Prof-specialty'),
occ_2 = as.numeric(df$occupation %in% c('Protective-serv','Sales','Tech-support')),
occ_3 = as.numeric(df$occupation %in% c('Craft-repair','Transport-moving')),
occ_4 = as.numeric(df$occupation %in% c('?','Adm-clerical','Armed-Forces','Farming-fishing','Handlers-cleaners','Machine-op-inspct')),
occ_5 = as.numeric(df$occupation %in% c('Other-service','Priv-house-serv'))
) %>% select(-occupation)
# native.country
round(prop.table(table(df$native.country, df$Y),1),1)
df = df %>% mutate(nc_1 = as.numeric(df$native.country %in% c('?','Canada','China','Cuba','England','Germany','Greece','Hong','Italy','Philippines')),
nc_2 = as.numeric(df$native.country %in% c('Hungary','Ireland','Poland','Scotland','South','Thailand','United-States')),
nc_3 = as.numeric(df$native.country %in% c('Ecuador','El-Salvador','Haiti','Honduras','Jamaica','Laos','Mexico','Nicaragua','Peru','Portugal','Puerto-Rico','Trinadad&Tobago','Vietnam')),
nc_4 = as.numeric(df$native.country %in% c('Columbia','Dominican-Republic','Guatemala','Holand-Netherlands','Outlying-US(Guam-USVI-etc)'))
) %>% select(-native.country)
##-----------------Flag Variables
# to convert those variable into flags which have high number of same values
sum(df$capital.gain==0)/nrow(df)
sum(df$capital.loss==0)/nrow(df)
sum(df$hours.per.week==40)/nrow(df)
df = df %>% mutate(cg_flag = as.numeric(capital.gain==0),
cl_flag = as.numeric(capital.loss==0),
Y = as.numeric(Y == ' >50K'))
write.csv(df, "census_income_modified.csv")
df = data.frame(read.csv("datasets/Data/Data/census_income.csv", stringsAsFactors = F))
View(df)
col_name = names(df)[-length(names(df))]
dummy_var_list = c()
for (c in col_name) {
if (typeof(df[,c]) == "character" ){
print(paste0("Number of Categories in ",c," : ", length(unique(df[,c]))))
if(length(unique(df[,c]))<=6){
dummy_var_list = append(dummy_var_list, c) # list of cat var with 6 or less categories
}
}
}
##---------------------Create Dummies
CreateDummies=function(data,var,freq_cutoff=0){
t=table(data[,var])
t=t[t>freq_cutoff]
t=sort(t)
categories=names(t)[-1]
for( cat in categories){
name=paste(var,cat,sep="_")
name=gsub(" ","",name)
name=gsub("-","_",name)
name=gsub("\\?","Q",name)
name=gsub("<","LT_",name)
name=gsub("\\+","",name)
name=gsub("\\/","_",name)
name=gsub(">","GT_",name)
name=gsub("=","EQ_",name)
name=gsub(",","",name)
data[,name]=as.numeric(data[,var]==cat)
}
data[,var]=NULL
return(data)
}
for (var in dummy_var_list){
df = CreateDummies(df, var)
}
# workclass
# round(prop.table(table(df$workclass, df$Y),1),1)
df$workclass = gsub(" ","",df$workclass)
df = df %>% mutate(wc_1 = as.numeric(df$workclass =='Self-emp-inc'),
wc_2 = as.numeric(df$workclass =='Federal-gov'),
wc_3 = as.numeric(df$workclass %in% c('Local-gov','Self-emp-not-inc','State-gov')),
wc_4 = as.numeric(df$workclass =='Private'),
wc_5 = as.numeric(df$workclass =='?')
) %>% select(-workclass)
table(df$wc_1)
df$education = gsub(" ","",df$education)
df = df %>% mutate(edu_1 = as.numeric(df$education =='Masters'),
edu_2 = as.numeric(df$education =='Bachelors'),
edu_3 = as.numeric(df$education == 'Assoc-voc'),
edu_4 = as.numeric(df$education %in% c('Assoc-acdm','HS-grad','Some-college')),
edu_5 = as.numeric(df$education %in% c('10th','11th','12th','7th-8th','9th')),
edu_6 = as.numeric(df$education %in% c('1st-4th','5th-6th','Preschool'))
) %>% select(-education)
# marital.status
# round(prop.table(table(df$marital.status, df$Y),1),1)
df$marital.status = gsub(" ","",df$marital.status)
df = df %>% mutate(ms_1=as.numeric(df$marital.status %in% c('Divorced','Married-spouse-absent','Separated','Widowed')),
ms_2=as.numeric(df$marital.status %in% c('Never-married'))
) %>% select(-marital.status)
# occupation
round(prop.table(table(df$occupation, df$Y),1),1)
df$occupation = gsub(" ","",df$occupation)
df = df %>% mutate(occ_1 = as.numeric(df$occupation =='Prof-specialty'),
occ_2 = as.numeric(df$occupation %in% c('Protective-serv','Sales','Tech-support')),
occ_3 = as.numeric(df$occupation %in% c('Craft-repair','Transport-moving')),
occ_4 = as.numeric(df$occupation %in% c('?','Adm-clerical','Armed-Forces','Farming-fishing','Handlers-cleaners','Machine-op-inspct')),
occ_5 = as.numeric(df$occupation %in% c('Other-service','Priv-house-serv'))
) %>% select(-occupation)
# native.country
round(prop.table(table(df$native.country, df$Y),1),1)
df$native.country = gsub(" ","",df$native.country)
df = df %>% mutate(nc_1 = as.numeric(df$native.country %in% c('?','Canada','China','Cuba','England','Germany','Greece','Hong','Italy','Philippines')),
nc_2 = as.numeric(df$native.country %in% c('Hungary','Ireland','Poland','Scotland','South','Thailand','United-States')),
nc_3 = as.numeric(df$native.country %in% c('Ecuador','El-Salvador','Haiti','Honduras','Jamaica','Laos','Mexico','Nicaragua','Peru','Portugal','Puerto-Rico','Trinadad&Tobago','Vietnam')),
nc_4 = as.numeric(df$native.country %in% c('Columbia','Dominican-Republic','Guatemala','Holand-Netherlands','Outlying-US(Guam-USVI-etc)'))
) %>% select(-native.country)
##-----------------Flag Variables
# to convert those variable into flags which have high number of same values
sum(df$capital.gain==0)/nrow(df)
sum(df$capital.loss==0)/nrow(df)
sum(df$hours.per.week==40)/nrow(df)
df = df %>% mutate(cg_flag = as.numeric(capital.gain==0),
cl_flag = as.numeric(capital.loss==0),
Y = as.numeric(Y == ' >50K'))
write.csv(df, "census_income_modified.csv")
library(car)
##--------------read data
df = data.frame(read.csv('census_income_modified.csv'))
df = select(df, -c(capital.gain, capital.loss))
##--------------split data into train and test
split = 0.75
set.seed(123)
r = sample(1:nrow(df), split*nrow(df))
df_train = df[r,]
df_test = df[-r,]
##------------Remove multicolinearity
lm_model = lm(Y~., df_train)
vif(lm_model)
sort(vif(lm_model), descending = T)
sort(vif(lm_model), decreasing = T)
##------------Remove multicolinearity
col_to_remove = c("wc_4")
lm_model = lm(Y~.-col_to_remove, df_train)
lm_model = lm(Y~.-wc_4, df_train)
sort(vif(lm_model), decreasing = T)
sort(vif(lm_model), decreasing = T)[1:5]
lm_model = lm(Y~.-wc_4-relationship_Husband, df_train)
sort(vif(lm_model), decreasing = T)[1:5]
lm_model = lm(Y~.-wc_4-relationship_Husband-edu_4, df_train)
sort(vif(lm_model), decreasing = T)[1:10]
lm_model = lm(Y~.-wc_4-relationship_Husband-edu_4-race_white, df_train)
lm_model = lm(Y~.-wc_4-relationship_Husband-edu_4- race_white, df_train)
lm_model = lm(Y~.-wc_4-relationship_Husband-edu_4-race_White, df_train)
sort(vif(lm_model), decreasing = T)[1:10]
lm_model = lm(Y~.-wc_4-relationship_Husband-edu_4-race_White-nc_2, df_train)
sort(vif(lm_model), decreasing = T)[1:10]
log_model = glm(Y~.-wc_4-relationship_Husband-edu_4-race_White-nc_2, df_train, family = 'Binomial')
log_model = glm(Y~.-wc_4-relationship_Husband-edu_4-race_White-nc_2, df_train, family = 'binomial')
summary(log_model)
step(log_model)
formula(log_model)
log_model = glm(formula = Y ~ age + fnlwgt + education.num + hours.per.week +
relationship_Wife + relationship_Unmarried + relationship_Own_child +
relationship_Not_in_family + race_Amer_Indian_Eskimo + sex_Male +
wc_2 + wc_3 + wc_5 + edu_2 + edu_6 + ms_1 + ms_2 + occ_1 +
occ_2 + occ_3 + occ_4 + occ_5 + nc_3 + nc_4 + cg_flag + cl_flag,
family = "binomial", data = df_train)
summary(log_model)
library(car)
##--------------read data
df = data.frame(read.csv('census_income_modified.csv'))
df = select(df, -c(capital.gain, capital.loss))
##--------------split data into train and test
split = 0.75
set.seed(123)
r = sample(1:nrow(df), split*nrow(df))
df_train = df[r,]
df_test = df[-r,]
##------------Remove multicolinearity
lm_model = lm(Y~.-wc_4-relationship_Husband-edu_4-race_White-nc_2, df_train)
sort(vif(lm_model), decreasing = T)[1:10]
lm_model = lm(Y~.-wc_4-relationship_Husband-edu_4-race_White-nc_2-ms_2, df_train)
sort(vif(lm_model), decreasing = T)[1:10]
log_model = glm(Y~.-wc_4-relationship_Husband-edu_4-race_White-nc_2-ms_2, df_train, family = 'binomial')
log_model = step(log_model)
formula(log_model)
log_model = glm(formula = Y ~ age + fnlwgt + education.num + hours.per.week + relationship_Wife +
relationship_Unmarried + relationship_Own_child + relationship_Not_in_family +
race_Amer_Indian_Eskimo + race_Asian_Pac_Islander + race_Black +
sex_Male + wc_1 + wc_2 + wc_3 + wc_5 + edu_2 + edu_6 + ms_1 +
occ_1 + occ_2 + occ_3 + occ_4 + occ_5 + nc_3 + nc_4 + cg_flag +
cl_flag, family = "binomial", data = df_train)
df_train$score = predict(log_model, df_train, type='response')
library(ggplot2)
ggplot(df_train, aes(x=score, y=Y, color=factor(Y))+geom_point()+geom_jitter()
ggplot(df_train, aes(x=score, y=Y, color=factor(Y)))+geom_point()+geom_jitter()
ggplot(df_train, aes(x=score, y=Y, color=factor(Y)))+geom_point()+geom_jitter()
##---------------metrics calculations
cutoff = 0.3
TP = sum(as.numeric(df_train$Y==1 & df_train$score>=cutoff))
TP
TN = sum(as.numeric(df_train$Y==0 & df_train$score<cutoff))
FP = sum(as.numeric(df_train$Y==0 & df_train$score>=cutoff))
FN = sum(as.numeric(df_train$Y==1 & df_train$score<cutoff))
Accuracy = (TP+TN)/(TP+TN+FP+FN)
Sn = TP/(TP+FN)
Sp = TN/(TN+FP)
Dist_var = sqrt((1-Sn)**2+(1-Sp)**2)
KS = Sn - FP/(TN+FP)
M = (9*FN+0.6*FP)/(1.9(TP+TN+FP+FN))
M = (9*FN+0.6*FP)/(1.9*(TP+TN+FP+FN))
cars = mtcars
print(typeof(cars))
cars = data.frame(mtcars)
print(typeof(cars))
cars = data.frame(mtcars)
cars = as.data.frame(mtcars)
print(typeof(cars))
library(dplyr)
cars = data_frame(mtcars)
print(typeof(cars))
cars = as.data.frame(mtcars)
print(typeof(cars))
test2 <- list( c('a','b','c'), c(a='d',b='e',c='f'))
as.data.frame(test2)
test2 <- list( c('a','b','c'), c('d','e','f'))
as.data.frame(test2)
